@startuml
skinparam classAttributeIconSize 0

class Exception{
    
}

package javax.servlet.http {
    class HttpServlet {

    }
}

package ch.giuliobosco.freqline.servlets {
    abstract BaseServlet {
        + {static} String S_200_OK
        + {static} String S_201_CREATED
        + {static} String S_201_NO_CONTENT
        + {static} String S_304_NOT_MODIFIED
        + {static} String S_400_BAD_REQUEST
        + {static} String S_401_UNAUTHORIZED
        + {static} String S_403_FORBIDDEN
        + {static} String S_404_NOT_FOUND
        + {static} String S_406_NOT_ACCEPTABLE
        + {static} String S_409_CONFLICT
        + {static} String S_500_INTERNAL_SERVER_ERROR
        + {static} String S_501_NOT_IMPLEMENTED
        + {static} String S_STATUS
        + {static} String S_STATUS_STRING
        + {static} String S_STATUS_ERROR
        + {static} String S_STATUS_NOT_ACCEPTABLE
        + {static} String S_NOT_VALID_PARAMETERS
        + {static} String S_MISSING_PARAMETERS
        + {static} String S_PATH
        + {static} String S_ACTION
        + {static} String S_MESSAGE
        + {static} String S_REQUEST_URI
        + {static} String S_REQUEST_URL
        + {static} String S_METHOD
        + {static} String S_REQUEST
        - JdbcConnector connector
        # JdbcConnector getConnector()
        # JdbcConnector setConnector(JdbcConnector connector)
        # void ok(HttpServletResponse response, String string)
        # void ok(HttpServletResponse response, JSONObject jo)
        # void created(HttpServletResponse response, String string)
        # void created(HttpServletResponse response, JSONObject jo)
        # void noContent(HttpServletResponse response)
        # void notModified(HttpServletResponse response)
        # void badRequest(HttpServletResponse response, HttpServletResponse response)
        # void unauthorized(HttpServletResponse response, HttpServletResponse response)
        # void forbidden(HttpServletResponse response, String action)
        # void notFound(HttpServletResponse response, HttpServletResponse response)
        # void notAcceptable(HttpServletResponse response, HttpServletResponse response)
        # void conflict(HttpServletResponse response, String string)
        # void internalServerError(HttpServletResponse response, String message)
        # void internalServerError(HttpServletResponse response, JSONObject jo)
        # void notImplemented(HttpServletResponse response)
        - void write(HttpServletResponse response, String string)
        - void writeStatus(HttpServletResponse response, int statusCode, String statusCode)
        - void writeStatus(HttpServletResponse response, int statusCode, String statusString, String message)
        - void writeStatus(HttpServletResponse response, int statusCode, String statusString, JSONObject jo)
        - JSONObject requestToJson(HttpServletRequest request)
        - JSONObject requestToJson(HttpServletRequest request, JSONObject jo)
        # void notValidParameters(HttpServletResponse response, String[] notValidParameters)
        # void missingParameters(HttpServletResponse response, Stringp[] missingParameters)
        + JSONObject getOkResponse()
        + JSONObject getOkResponse(int id)
        + JSONOBject getNotCapableResponse()
        + void closeConnector()
        # String firstValue(Map<String, String[]> map, String key)
        # {abstract} String getPath();
        # void doOptions(HttpServletRequest request, HttpServletResponse response)
    }
    HttpServlet <|-- BaseServlet

    package .help {
        class ServletRequestAnalyser {
            + {static} int OK
            + {static} int MISSING_PARAMETERS
            + {static} int NOT_VALID_PARAMETERS
            - Map<String, String[]> parameters
            - String[] requiredParameters
            - String[] optionalParameters
            - String[] missingParameters
            - String[] notValidParameters
            - String[] presentOptionalParameters
            - Validator validator
            + String[] getMissingParameters()
            + String[] getNotValidParameters()
            + String[] getPresentOptionalParameters()
            + int getStatus()
            + Map<String, String[]> getParameters()
            + String getParameter(String key)
            + ServletRequestAnalyser(String[] requiredParameters, String[] optionalParameters, Map<String, String[]> parameters, Validator validator)
            + ServletRequestAnalyser(String[] requiredParameters, Map<String, String[]> parameters)
            + ServletRequestAnalyser(String[] requiredParameters, Map<String, String[]> parameters, Validator validator)
            - void setMissingParameters()
            - void setPresentOptionalParameters()
            - void setNotValidParameters(String[] parameters)
        }

        class ServletNfe {
            + ServletNfe()
            + ServletNfe(String message)
        }
        Exception <|-- ServletNfe

        ServletRequestAnalyser -[hidden]> ServletNfe
    }
}

@enduml